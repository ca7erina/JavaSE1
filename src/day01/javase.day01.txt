Java SE (java API) Day01
2012/5/15
====================
Java API 
Java 系统类库 
Java 类库
Java 核心的API(最常用的API类)
字符串, 集合, IO, 线程, 网络, 反射等
Swing(很少用)

API都是类文件, 在rt.jar中

1 String 字符串

 1 字符串的工作原理
 2 字符串 常用 API 方法
 3 静态字符串的优化现象
 4 正则表达式


  字符串是"不变模式", 字符串的使用体验, 非常接近基本类型
  包装类型也是"不变模式", Integer i= new Integer(1); 

  String 字符串 = char[] + 操作(toUpperCase(), concat())
  类: 数据+相关的操作
  char数组只是数据, 没有操作
  一串字符就是字符串: char[] , String, StringBuilder
  1 字符串"字面量(直接量)"都是String类型实例
    "字符串常量"
    public static final String TYPE = "car";
    /////////                  常量     字面量/直接量
    Stirng 内部就是一个char[].
  2 String API 有一个实现原则: 对象内容永远不变
    也就是说: String对象永远不变. 为性能提供极致的优化!
    String API 如果改变内容就返回新字符串, 否则返回原则字符串
  3 String 字面量(直接量), 如果相同, 会替换为同
    一个String对象的引用, 常量连接的结果也被优化
    为一个字符串.
    String s = new String("abc");
  4 String 的比较, equals, hashCode()
  5 String API (字符串的常用方法)
    这些方法如果返回String 一般是一个新String对象
    toString()  除外.
    字符串中的字符有序号, 从0开始.
    API 方法:
    charAt() 
    length()
    trim()
    indexOf()
    lastIndexOf()
    endsWith()
    startsWith()
    substring(int start, int end)
    substring(int start)
    
    String str = new String(new char[]{'1','2','3'});
    char[] chs = str.toCharArray();

3 正则表达式: 负责的字符串匹配处理规则, 应用广泛.
  学习建议: 1 要能够读懂"正则表达式"
           2 能够写出简单的"正则表达式"
           3 不要过多的分配学习时间!
  可以应用于: java grep vi
  1 字符集: [1234] 表示 1,2,3,4 之一
            [^12] 表示除了 1,2
            [1-5] 表示 1,2,3,4,5
            [a-f] 表示 a-f 之间的
            [0-9a-fA-F] 表示:一个16进制字符
            
            0[xX][0-9a-fA-F]{1,8}
            [\w]{8,15}
    预定义字符集:
            \d : [0-9]
            . : 任意字符
            \w: 单词字符 [0-9a-zA-Z_]
            \s: 匹配空白: 空格 \t \n \r \b \p
            
            \D
            \S
            \W
 
  2 {m,n} 数词
       {n}
       {m,n}
       ? : {0,1}
       + : {1,}
       * : {0,}
  
  3 ^ 开头
    $ 结尾  
 
  
邮政编码: ^[0-9][0-9][0-9][0-9][0-9][0-9]$
         ^[0-9]{6}$
         ^\d{6}$
         
用户名规则: ^\w{8,10}$
电话号:  +86 13912345678
        ^(\+86|0086)?\s?\d{11}$
身份证号码: ^\d{15}(\d{2}[0-9xX])?$
一个点的坐标: ^\d+(,\s*|\s+)\d+$   
            ^\d+[,\s]\s*\d+$ 
答案规则:^\s*A?(\s+|,\s*)B?(\s+|,\s*)C?(\s+|,\s*)D?\s*$
日期: 2011-01-30 
       ^\d{4}-\d{2}-\d{2}$
       ^\d{4}(-\d{2}){2}$

  IP 地址: 192.168.0.2
          ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
          ^\d{1,3}(\.\d{1,3}){3}$
          ^(\d{1,3}\.){3}\d{1,3}$
           
String 对正则表达式的支持
  .matches() 匹配正则表达式
  .split("[,\s\|]") 切分字符串为字符串数组
  .replaceAll()

Integer.parseInt() 转换到字符串到整数: 如: "23"-> 23

String: char[] + 方法(操作, API功能)
StringBuilder: char[] + 方法(操作char[] 的内容)


char[]:字符序列, 只有字符数据, 没有操作, 如果算法优秀, 性能最好
String: 内部包含内容不可变的char[], 表现为String对象不可变
       String包含操作(API方法), 是对char[] 操作, 但不改变原对象
       经常返回新的String对象, 很多String API提供了复杂的
       性能优化算法, 如: 静态字符串池, 如果不需要操作返回原对象
StringBuilder: 内部也是一个char[], 但是这个数组内容可变, 并且自动
     维护扩容算法, 因为数据内容可变, 所以叫: 可变字符串. 
     StringBuilder API 方法, 是动态维护char[]内容, 都可以改变
     char[] 内容.

StringBuffer VS StringBuilder 
 
  
作业 
  1 复习实现全部课堂案例代码
  2 比较性能: 
      a int i = 1; 重复 i=i+1
      b Integer i = 1; 重复 i=i+1; 
  3 创建一个List<String>集合, 添加多个测试数据
     
  
预习: 内部类, 异常

  
  
  
  
  
  